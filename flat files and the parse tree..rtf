{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fnil\fcharset0 Inconsolata;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww16600\viewh10560\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs40 \cf0 relationship between a flat file and a parse tree\
\
We want to be able to edit a flat file, and have the changes reflect in the parse tree. There are reasons for this; a big one is that insertion, deletion, and reflow of text files is well understood, even in an OT context. Also, modifying text could trigger an entire walk of the parse tree, which could be prohibitive in a larger file. \
\
We solve this by storing offsets in every node, not just the ones that contain a string. Any time a string is added or subtracted, the delta of the new value is passed up the tree all the way to the file root. \
\
Therefore, when we make an edit at position n in the string representing the file, or move the cursor, we find which node we're in as follows: we add along top level nodes. The first one will be greater than our value unless we're editing at the end of the file, so we go to the first child. When we find a value that's less than n, we proceed to the next sibling until we find a greater than n value again, backtrack, and go to the next child level. \
\
This is fairly fast; fast enough, in practice. We only have to reparse and OT the project tree when new nodes are created, destroyed, or modified in total (that is to say, an entire token match, not the individual characters that go into it); the state tree of Hydra is updated with each action, but is fairly flat in character, more of a linked list with branches than a context tree. It should be possible to update in constant time. \
\
Parsing may cause insertions, deletions and rearrangements, all of which is done within the parse tree. The parse tree will then generate flat representations of the changed strings and insert them into the flat text buffer directly. This is all simple enough in principle. }