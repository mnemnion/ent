git and Hydra

git and Hydra have a peculiar, complementary relationship. Hydra is Dr. Who, git is the Auditors from Terry Pratchett's Thief of Time. Together, they make the code happy. 

git is Yetziratic. That is, it lives in a reality which is a strict f(t), and concerns itself with the deltas. t increases monotonically and inexorably. In Hydra we do not 'save', we commit; this is a snapshot of the codebase at that moment in time. This includes, or should include, Hydra's OT chain for the project and the Hydra state machine itself.

So when you 'save' a 'file', you're doing three things: committing the file, making a snapshot of the OT project database, and saving Hydra's state at that moment in time. Given proper handling of dependencies (which, meta heeeey, I'll write about later), these things are sufficient to teleport back to that instant. It is, as it should be, irrevocable, because it happened in the real world where actions have consequences. If you're really sober minded you'll push it out to a couple repos, or ideally, someone will get gittorrent working. 

Hydra, however, positively thrives on going back in time and messing with it. git has a magic crystal that can look into the past. Hydra has a TARDIS. It is Briatic.

Hydra's timeline has branches, little rump worlds where code is explored and abandoned. That's dandy, even git has a bit of that natively. What Hydra does, and git won't, is loop in time. Hydra welcomes going back in time, making changes, and propagating them back into the present. This doesn't create a branch universe, it alters the Real World. If you want the Old World back, you go back to where you originally went back in time, and decide not to do that. 

Like I said. TARDIS. OT really allows for this; the time travel stuff is much more exciting than mere peer synchronization, which is time travel anyway. 

what does git do? It takes a picture. If you go back in time in Hydra and propagate changes, git will take a snapshot of this new reality. That will include the time travel portal and all, but git doesn't care: it is doing its job, which is cataloging all changes it sees with a total and serene lack of care for how they came about. 

This is why the difference is important: if you go back to a previous git snapshot, you will find the Old World there also. The Auditor took a picture, and that's that. If you go back in time in Hydra, you will travel backwards in the New World, and each change you make can create a Newer World.

And so on, ad infinitum. When you mess around with time, and want to undo it, you have two options: git back, or pull a Primer and revert the original decision to travel in time. 

Ultimately, the Second Law of Thermodynamics applies, if we're living in a closed system, which,